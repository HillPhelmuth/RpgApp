@page "/"
@using System.Net.Http.Json
@using System.ComponentModel
@using RpgApp.Shared
@using RpgApp.Client.Pages.StyleTests
@inject HttpClient Http
@inject AuthenticationStateProvider AuthState

<RpgTabGroup @bind-ActiveIndex="indexTab">

    <RpgTab Label="Generate Character">
        <GamePlayPrimary />
    </RpgTab>
    <RpgTab Label="Data Query Testing">
        <TestQueries />
    </RpgTab>
    <RpgTab Label="MyLayout">
        <LayoutMyCss />
    </RpgTab>
    <RpgTab Label="Test Styles">
        @*<div class="text-center" style="font-size:150%"><NavLink href="samples">GoTo Testing Page</NavLink></div>*@
        <CompLibraryTester />
    </RpgTab>
    <RpgTab Label="Test Page">
        @if (AppState.CurrentPlayer == null)
        {
            <MatH3 Style="color:red">Error!</MatH3>
            <MatH5>Visit Query tester page and Select a default player before returning</MatH5>
        }
        else
        {
            <TestPage />
        }

    </RpgTab>
    <RpgTab Label="D&D API Dev Tools">
        @*<CheatCreate/>*@ <MatH3>Moving to it's own project</MatH3>
    </RpgTab>
</RpgTabGroup>
@code
{
    protected int indexTab;
    [CascadingParameter(Name = "AppState")]
    public AppStateManager AppState { get; set; }
    protected override Task OnInitializedAsync()
    {
        AppState.PropertyChanged += UpdateTab;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var allData = await Http.GetFromJsonAsync<AllAppData>($"{AppConstants.ApiUrl}/AllAppData");
            AppState.AllEquipment = allData.Equipment;
            AppState.AllMonsters = allData.Monsters;
            AppState.AllSkills = allData.Skills;
            Console.WriteLine($"Equipment: {string.Join(",", AppState.AllEquipment.Select(x => x.Name))}");
            Console.WriteLine($"Skills: {string.Join(",", AppState.AllSkills.Select(x => x.Name))}");
            var authState = await AuthState.GetAuthenticationStateAsync();
            string user = authState.User?.Identity?.Name;
            AppState.UserId = user;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async void UpdateTab(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != "IndexTab") return;
        indexTab = AppState.IndexTab;
        await InvokeAsync(StateHasChanged);
    }

}
