@page "/"
@using System.Net.Http.Json
@using System.ComponentModel
@using RpgApp.Shared
@using RpgApp.Client.Pages.StyleTests
@inject HttpClient Http
@inject AuthenticationStateProvider AuthState
@inject AuthHttpClient AuthClient
<RpgTabGroup @bind-ActiveIndex="indexTab">

    <RpgTab Label="Generate Character">
        <GamePlayPrimary />
        <div class="rpgui-content framedgolden" style="overflow:hidden">
            <a href="authTest">Test Authentication with "Authorized" navigation route.</a>
        </div>
        <hr />
        <textarea style="font-size:120%" rows="200" cols="200" @bind="seedInfo"></textarea>
        <hr />
        <RpgButton OnClick="TestAuthCalls" RpgButtonStyle="RpgButtonStyle.Golden" Width="30" Label="Test Auth Call" />
        <div>
            @if (authCallMessages.Count > 0)
            {
                foreach (var message in authCallMessages)
                {
                    <p>@message</p>
                }
            }
        </div>
    </RpgTab>
    <RpgTab Label="Data Query Testing">
        <TestQueries />
    </RpgTab>
    <RpgTab Label="MyLayout">
        <LayoutMyCss />
    </RpgTab>
    <RpgTab Label="Test Styles">
        @*<div class="text-center" style="font-size:150%"><NavLink href="samples">GoTo Testing Page</NavLink></div>*@
        <CompLibraryTester />
    </RpgTab>
    <RpgTab Label="Test Page">
        <h1 Style="color:red">Error!</h1>
        <h2>We haven't used this page in a long time. I'm commenting all of it so we can fully move from MatBlazor component library to the RpgUI Component Library</h2>

    </RpgTab>
    <RpgTab Label="D &amp; D API Dev Tools">
        @*<CheatCreate/>*@ <h1>Moving to it's own project</h1>
    </RpgTab>
</RpgTabGroup>
@code
{
    protected int indexTab;
    [CascadingParameter(Name = "AppState")]
    public AppStateManager AppState { get; set; }

    private string seedInfo;
    protected override Task OnInitializedAsync()
    {
        AppState.PropertyChanged += UpdateState;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //var seedResult = await Http.GetFromJsonAsync<string>($"{AppConstants.ApiUrl}/CreateAndSeed");
            //seedInfo = seedResult;
            //await InvokeAsync(StateHasChanged);
            var allData = await Http.GetFromJsonAsync<AllAppData>($"{AppConstants.ApiUrl}/AllAppData");
            AppState.AllEquipment = allData?.Equipment ?? new List<Equipment>();
            AppState.AllMonsters = allData?.Monsters ?? new List<Monster>();
            AppState.AllSkills = allData?.Skills ?? new List<Skill>();
            //Console.WriteLine($"Equipment: {string.Join(",", AppState.AllEquipment.Select(x => x.Name))}");
            //Console.WriteLine($"Skills: {string.Join(",", AppState.AllSkills.Select(x => x.Name))}");
            var authState = await AuthState.GetAuthenticationStateAsync();
            if (authState.User?.Identity?.IsAuthenticated == true)
            {
                string user = authState.User?.Identity?.Name;
                AppState.UserId = user;
                AppState.UserData = await Http.GetFromJsonAsync<UserData>($"{AppConstants.ApiUrl}/GetUserPlayers/{user}");
                await InvokeAsync(StateHasChanged);
            }

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private List<string> authCallMessages = new();
    private async Task TestAuthCalls()
    {
        authCallMessages.Add($"Starting Api calls using the named httpclient ({nameof(AuthClient)}) calls to auth controller");
        await InvokeAsync(StateHasChanged);
        var addOrUpdate = await AuthClient.AddOrUpdatePlayer(AppState.CurrentPlayer);
        authCallMessages.Add($"AddOrUpdatePlayer returned {addOrUpdate}");
        await InvokeAsync(StateHasChanged);
        var getPlayers = await AuthClient.GetUserPlayers(AppState.UserId ?? "");
        authCallMessages.Add($"GetUserPlayers call for {getPlayers.UserName}-- {string.Join(';', getPlayers.Players.Select(p => p.Name))}");
        await InvokeAsync(StateHasChanged);
    }
    protected async void UpdateState(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(AppState.IndexTab)) return;
        Console.WriteLine($"{e.PropertyName} change handled by {nameof(Index)}");
        indexTab = AppState.IndexTab;
        await InvokeAsync(StateHasChanged);
    }

}
