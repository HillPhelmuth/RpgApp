@page "/authTest"
@attribute [Authorize]
@using System.ComponentModel
@using RpgApp.Shared
@using Index = RpgApp.Client.Pages.Index
@inject HttpClient Http
@inject AuthenticationStateProvider AuthState

<RpgTabGroup @bind-ActiveIndex="indexTab">

    <RpgTab Label="Generate Character">
        <GamePlayPrimary />
        <div class="rpgui-content framedgolden" style="overflow:hidden">
            <h1>You are now in the Authorized route version of the app</h1>
        </div>
    </RpgTab>
    <RpgTab Label="Data Query Testing">
        <TestQueries />
    </RpgTab>
    <RpgTab Label="MyLayout">
        <LayoutMyCss />
    </RpgTab>
    <RpgTab Label="Test Styles">
        @*<div class="text-center" style="font-size:150%"><NavLink href="samples">GoTo Testing Page</NavLink></div>*@
        <CompLibraryTester />
    </RpgTab>
   
    <RpgTab Label="D &amp; D API Dev Tools">
        @*<CheatCreate/>*@ <h1>Moving to it's own project</h1>
    </RpgTab>
</RpgTabGroup>
@code
{
    protected int indexTab;
    [CascadingParameter(Name = "AppState")]
    public AppStateManager AppState { get; set; }
    protected override Task OnInitializedAsync()
    {
        AppState.PropertyChanged += UpdateState;
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var allData = await Http.GetFromJsonAsync<AllAppData>($"{AppConstants.ApiUrl}/AllAppData");
            AppState.AllEquipment = allData?.Equipment ?? new List<Equipment>();
            AppState.AllMonsters = allData?.Monsters ?? new List<Monster>();
            AppState.AllSkills = allData?.Skills ?? new List<Skill>();
            Console.WriteLine($"Equipment: {string.Join(",", AppState.AllEquipment.Select(x => x.Name))}");
            Console.WriteLine($"Skills: {string.Join(",", AppState.AllSkills.Select(x => x.Name))}");
            var authState = await AuthState.GetAuthenticationStateAsync();
            if (authState.User?.Identity?.IsAuthenticated == true)
            {
                string user = authState.User?.Identity?.Name;
                AppState.UserId = user;
                AppState.UserData = await Http.GetFromJsonAsync<UserData>($"{AppConstants.ApiUrl}/GetUserPlayers/{user}");
                await InvokeAsync(StateHasChanged);
            }

        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async void UpdateState(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName != nameof(AppState.IndexTab)) return;
        Console.WriteLine($"{e.PropertyName} change handled by {nameof(Index)}");
        indexTab = AppState.IndexTab;
        await InvokeAsync(StateHasChanged);
    }

}
