@page "/samples"
@layout RpgBaseLayout
    <div class="rpgui-content" style="top:50px">
        <div style="background-color:black">
            <h1 style="font-size:125%">Component Library Tester</h1>
            <h1 style="font-size:125%">Trying it without ANY javascript</h1>
        </div>

        <div class="page-container">
            <div class="col">
                <div class="rpgui-container framed rpgui-draggable" style="height:auto; width:300px">
                    <h1>Custom Buttons RpgButton.razor</h1>
                    <hr />
                    <h2>Click to display and update progress bars</h2>
                    <br />
                    <div class="btn-icon-grp">
                        <span style="width:75%"> <RpgButton OnClick="@(async() =>await UpdateBar("Life"))" Label="Adjust Life" RpgButtonStyle="RpgButtonStyle.Standard"></RpgButton></span>
                    </div>
                    <div class="btn-icon-grp">
                        <span style="width:75%"><RpgButton OnClick="@(async() =>await UpdateBar("Mana"))" Label="Adjust Mana" RpgButtonStyle="RpgButtonStyle.Golden"></RpgButton></span>

                    </div>
                    <div class="btn-icon-grp">
                        <span style="width:75%"><RpgButton OnClick="@(async() =>await UpdateBar("Stamina"))" Label="Adjust Stamina" RpgButtonStyle="RpgButtonStyle.Silver"> </RpgButton></span>

                    </div>
                    <hr />
                    <h1>Custom Progress RpgProgressBar.razor</h1>
                    @if (showProgress)
                    {
                        <RpgProgressBar Label="Life" ElementId="life-id2" MinValue="0" MaxValue="100" DataValue="life" ProgressBarColor="ProgressBarColor.Red" />
                        <RpgProgressBar Label="Mana" ElementId="mana-id2" MinValue="0" MaxValue="100" DataValue="mana" ProgressBarColor="ProgressBarColor.Blue" />
                        <RpgProgressBar Label="Stamina" ElementId="stamnia-id2" MinValue="0" MaxValue="100" DataValue="stamina" ProgressBarColor="ProgressBarColor.Green" />
                    }

                </div>
            </div>
            <div class="col">
                <RpgButton OnClick="@(() => showMenu = !showMenu)" RpgButtonStyle="RpgButtonStyle.Silver">Equip RpgItemsMenu.razor</RpgButton>
                <hr />
                @if (showMenu)
                {
                    <RpgItemsMenu ImageItemActions="_imagesEquipPairs" MenuColumns="5" MenuFrame="Frame.FramedGrey" Context="item" TItem="Equipment">
                        <MenuHeader>
                            <h1>This is a menu header TEMPLATE</h1>
                            <h2>This menu is for Equipment with random images</h2>
                        </MenuHeader>
                        <ToolTipTemplate>
                            @item.AsDisplayString()
                        </ToolTipTemplate>
                        <ActionTemplate>
                            <h3>The Action is also a template. We can add any number of buttons</h3>
                            <label>@item.Name</label>
                            <RpgButton OnClick="@(() => AddToLog(item.AsDisplayString()))" Label="Action: Add Info To Log"></RpgButton>
                        </ActionTemplate>
                    </RpgItemsMenu>
                }
            </div>
            <div class="col">
                <RpgButton OnClick="@(() => showMenu = !showMenu)" RpgButtonStyle="RpgButtonStyle.Golden">Skills RpgItemsMenu.razor</RpgButton>
                <hr />
                @if (showMenu)
                {

                    <RpgItemsMenu ImageItemActions="_imagesSkillPairs" MenuColumns="5" MenuFrame="Frame.FramedGolden2" Context="item" TItem="Skill">
                        <MenuHeader>
                            <h1>This is a menu header TEMPLATE</h1>
                            <h2>This menu is for Skills with random images</h2>
                        </MenuHeader>
                        <ToolTipTemplate>
                            @item.AsDisplayString()
                        </ToolTipTemplate>
                        <ActionTemplate>
                            <h3>The Action is also a template. We can add any number of buttons</h3>
                            <label>@item.Name</label>
                            <RpgButton OnClick="@(() => AddToLog(item.AsDisplayString()))" Label="Action: Add Info To Log"></RpgButton>
                        </ActionTemplate>
                    </RpgItemsMenu>
                }
            </div>
            <div class="col">
                <div class="rpgui-container framedgolden2">
                    <h1>RpgSelectDropdown.razor</h1>
                    <label>Equipment Dropdown</label>
                    <RpgSelectDropdown TItem="Equipment" @bind-SelectedValue="selectedEquipment" OptionsList="AppState.AllEquipment" DisplayPropertyName="Name" OnSelectItem="SelectedEquipmentHanlder" />
                    <h2>@selectedEquipment.Name</h2>
                    <hr class="golden" />
                    <label>Skill Dropdown</label>
                    <RpgSelectDropdown TItem="Skill" @bind-SelectedValue="selectedSkill" OptionsList="AppState.AllSkills" DisplayPropertyName="Name" OnSelectItem="SelectedSkillHandler" />
                    <h2>@selectedSkill.Name</h2>
                    <hr class="golden" />
                    <label>String Drowdown (monster names)</label>
                    <RpgSelectDropdown TItem="string" @bind-SelectedValue="selectedMonster" OptionsList="selectStrings" OnSelectItem="SelectedStringHandler" />
                    <h2>@selectedMonster</h2>
                    <hr class="golden" />
                    <label>Enum Dropdown <code>ClassType</code> enum</label>
                    <RpgSelectDropdown TItem="ClassType" @bind-SelectedValue="selectedClass" OptionsList="@(Enum.GetValues(typeof(ClassType)).Cast<ClassType>().ToArray())" />
                    <h2>@Enum.GetName(selectedClass)</h2>
                </div>
            </div>
            <div class="col">
                <h2 style="background-color:black">RpgTabGroup.razor & RpgTab.razor</h2>
                <RpgTabGroup>
                    @foreach (var monster in AppState.AllMonsters)
                    {
                        <RpgTab Text="@monster.Name">
                            <div class="rpgui-container framed">
                                <p>Description: @monster.Description</p>
                                <p>Difficulty: @monster.DifficultyLevel</p>
                                <p>Exp awarded: @monster.ExpProvided</p>
                                <p>Gold awareded: @monster.GoldProvided</p>
                            </div>
                        </RpgTab>
                    }
                </RpgTabGroup>
            </div>
            <div class="col">
                <div class="rpgui-container framed" style="height: auto; width: 300px">
                    <h2>RpgSlider.razor with RpgProgressBar.razor</h2>
                    <RpgSlider Label="Life Setter" @bind-DataValue="slideLife" MinValue="0" MaxValue="100"/>
                    <RpgProgressBar Label="Life Meter" DataValue="slideLife" MinValue="0" MaxValue="100" ProgressBarColor="ProgressBarColor.Red"/>
                    <RpgSlider Label="Mana Setter" @bind-DataValue="slideMana" MinValue="0" MaxValue="100" IsGolden="true"/>
                    <RpgProgressBar Label="Mana Meter" DataValue="slideMana" MinValue="0" MaxValue="100" ProgressBarColor="ProgressBarColor.Blue"/>
                </div>
            </div>
            <div class="rpg-log">
                <div class="rpgui-container framedgolden" style="min-width: 450px; max-height:520px; overflow-y:scroll">
                    <h1>Menu Logs</h1>
                    <ol>
                        @foreach (var item in TestLog)
                        {
                            <li>@item</li>
                        }
                    </ol>
                </div>
            </div>
        </div>
    </div>


